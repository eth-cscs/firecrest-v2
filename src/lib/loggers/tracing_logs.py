# Copyright (c) 2025, ETH Zurich. All rights reserved.
#
# Please, refer to the LICENSE file in the root directory.
# SPDX-License-Identifier: BSD-3-Clause

import contextvars
import json
import re
import uuid
import logging

from fastapi import Request

# # configs
# from firecrest import config
# from firecrest.plugins import settings as plugin_settings

# Trace ID is autmatically generated with any Request
tracing_id = contextvars.ContextVar("tracing_id", default=str(uuid.uuid4()))
# Tracing data are generated by the middleware and collect general information about the processing Request
tracing_data = contextvars.ContextVar("tracing_data", default='{}')
# The actual tracing logger
tracing_logger = logging.getLogger("f7t_v2_tracing_log")


def get_log_traceid():
    return tracing_id.get()


def set_tracing_data(request: Request) -> None:
    url_path = request.scope['path']
    root_path = request.scope['root_path']
    # Normalize endpoint
    endpoint = url_path.removeprefix(root_path) if root_path != "" else url_path
    # Extract data from endpoint format "/router/system/method"
    if match := re.search(
        r"^\/([^\/\s]+)\/([^\/\s]+)\/(.*)$",
        endpoint,
        re.IGNORECASE,
    ):
        router = match.group(1)
        system = match.group(2)
        method = match.group(3)
    else:
        router = ""
        system = ""
        method = ""

    tracing_data.set(json.dumps(
        {
            "router": router,
            "system_name": system,
            "method": method,
            "endpoint": endpoint,
            "url_path": url_path,
            "user_agent": request.headers['user-agent']
        })
    )


def tracing_log_middleware(username: str, status_code: int) -> None:
    log_data = json.loads(tracing_data.get())    
    log_data["trace_id"] = get_log_traceid()
    log_data["username"] = username
    log_data["status_code"] = status_code
    tracing_logger.info(log_data)


def tracing_log_command(username, command_action, exit_status, command="") -> None:
    # Load f7t_v2_tracing_log data
    traced_data = json.loads(tracing_data.get())
    if traced_data:      
        # Log data packet
        log_data = {
            "trace_id": get_log_traceid(),
            "username": username,
            "microservice": traced_data['router'],
            "machinename": traced_data['system_name'],
            "message": command_action,
            "command" : command,
            "exit_status": exit_status
        }
        tracing_logger.info(log_data)
